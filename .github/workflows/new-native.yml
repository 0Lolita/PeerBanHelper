# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: GraalVM Native Image

on:
  push:
    branches: [ "master", "test" ]
  workflow_dispatch:
  release:
    types:
      - published
jobs:
  build-unix-like:
    name: build unix like
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '22'
          distribution: 'graalvm-community'
          version: '23.0.2'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build with Maven
        run: mvn -B -ntp clean package -Pnative-unix-like
        env:
          NO_DOCKER: ${{ runner.os != 'Linux' }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Linux-${{ github.sha }}
          path: |
            target/PeerBanHelper.jar
            target/peerbanhelper-binary
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ghostchu/peerbanhelper
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=semver,pattern={{version}}-native-linux
            type=semver,pattern={{major}}.{{minor}}-native-linux
            type=raw,latest-native-linux
            type=sha
      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile-NativeImage
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}-native-linux
      - name: Build and push Docker image (Alpine)
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile-NativeImage-alpine
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}-native-linux-alpine
  build-unix-like-muslc:
    name: build unix like (muslc)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '22'
          distribution: 'graalvm-community'
          version: '23.0.2'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup muslc
        run: |
          apt-get update
          apt-get upgrade
          apt-get install gcc build-essential autoconf libtool make
          current_path=$(pwd)
          wget -q https://more.musl.cc/10/x86_64-linux-musl/x86_64-linux-musl-native.tgz
          tar xf x86_64-linux-musl-native.tgz --directory /tmp
          TOOLCHAIN_DIR=/tmp/x86_64-linux-musl-native
          CC=$TOOLCHAIN_DIR/bin/gcc
          wget -q https://zlib.net/zlib-1.3.1.tar.gz
          tar xf zlib-1.3.1.tar.gz --directory /tmp
          cd /tmp/zlib-1.3.1
          ./configure --prefix=$TOOLCHAIN_DIR --static
          pwd
          ls
          ./make
          ./make install
          cd $current_path
      - name: Build with Maven
        run: mvn -B -ntp clean package -Pnative-unix-like-muslc
        env:
          NO_DOCKER: ${{ runner.os != 'Linux' }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Linux-${{ github.sha }}-muslc
          path: |
            target/PeerBanHelper.jar
            target/peerbanhelper-binary
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ghostchu/peerbanhelper
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=semver,pattern={{version}}-native-linux-muslc
            type=semver,pattern={{major}}.{{minor}}-native-linux-muslc
            type=raw,latest-native-linux-muslc
      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile-NativeImage
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}-native-linux-muslc
      - name: Build and push Docker image (Alpine)
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile-NativeImage-alpine
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}-native-linux-alpine-muslc
  build-windows:
    name: build windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '22'
          distribution: 'graalvm-community'
          components: 'native-image'
          version: '23.0.2'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build with Maven
        run: mvn -B -ntp clean package -Pnative-windows
        env:
          NO_DOCKER: ${{ runner.os != 'Linux' }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Windows-${{ github.sha }}
          path: |
            target/PeerBanHelper.jar
            target/peerbanhelper-binary.exe

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-unix-like,build-windows]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Zip
        working-directory: ./artifacts
        run: |
          for dir in ./*; do
                if [ -d $dir ]; then
                      os="$(echo ${dir##*/} |cut -d- -f1)"
                      zip -rj "PeerBanHelper.${{ github.event.release.tag_name }}.$os.zip" $dir/*
                      rm -rf $dir
                fi
          done
#      - name: Create release
#        uses: ncipollo/release-action@v1
#        with:
#          artifacts: "artifacts/*.zip"
#          name: ${{ github.event.release.tag_name }}
#          omitNameDuringUpdate: true
#          tag: ${{ github.event.release.tag_name }}
#          allowUpdates: true
#          artifactErrorsFailBuild: true